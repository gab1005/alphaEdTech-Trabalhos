//referencia:
"https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04-pt"

Passo 1 — Criando o certificado SSL
//atenção que deve-se especificar o diretorio de criação do .key e do .crt
"sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt"

//aparecera um campo de perguntas, a unica obrigatoria (que tem importancia para o funcionamento) é a que pede o nome ou ip do seu site

//Preencha os prompts devidamente. A linha mais importante é aquela que solicita o Nome comum (por exemplo, o servidor FQDN ou o SEU nome). Você precisa digitar o nome do domínio associado ao seu servidor ou, mais provável, o endereço IP público do seu servidor.

//Output
/*
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:New York
Locality Name (eg, city) []:New York City
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.
Organizational Unit Name (eg, section) []:Ministry of Water Slides
Common Name (e.g. server FQDN or YOUR name) []:server_IP_address
Email Address []:admin@your_domain.com
*/
//Colocar no "Common Name"
"10.0.0.4"

Passo 2 — Configurando o Apache para usar o SSL
/*
1 - Criaremos um snippet de configuração para especificar configurações padrão robustas do SSL.
2 - Vamos modificar o arquivo SSL Apache Host Virtual incluso para apontar para nossos certificados SSL gerados.
3 - (Recomendado) Modificaremos o arquivo de Host Virtual não criptografado para redirecionar automaticamente as solicitações para o Host Virtual criptografado.
*/
//Criando um snippet de configuração do Apache com configurações de criptografia robustas
//Crie um novo snippet no diretório /etc/apache2/conf-available. Vamos nomear o arquivo ssl-params.conf para deixar seu objetivo claro:

//OBS: no caso eu não tinha o /apache2 no /etc/ entao copiei ele para la:
"sudo cp -r /usr/local/apache2 /etc"

//criando ssl-params.conf e  abrindo ele com nano
"sudo nano /etc/apache2/conf-available/ssl-params.conf"

//no caso  eu usei o vim, ficando:
"sudo vi /etc/apache2/conf-available/ssl-params.conf"

//OBS: os comandos para criar "ssl-params.conf" não deram certo pois aparentemente (pelo menos usando o vim) eu teria que configurar o chmod (permissão) do arquivo; como alternativa eu criei as pastar o arquivo e depois mudei permissão com chmod
"sudo mkdir /etc/apache2/conf-available/"

"cd conf-available/"

"sudo touch ssl-params.conf"

"sudo chmod 777 ssl-params.conf"

"vi ssl-params.conf"

//dentro de ssl-params.conf, adicionei o sequinte conteudo
"atenção: copiar o comentario a baixo"
/*
SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
SSLHonorCipherOrder On
# Disable preloading HSTS for now.  You can use the commented out header line that includes
# the "preload" directive if you understand the implications.
# Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
Header always set X-Frame-Options DENY
Header always set X-Content-Type-Options nosniff
# Requires Apache >= 2.4
SSLCompression off
SSLUseStapling on
SSLStaplingCache "shmcb:logs/stapling-cache(150000)"
# Requires Apache >= 2.4.11
SSLSessionTickets Off
*/

//Modificando o arquivo padrão de Host Virtual SSL do Apache
"cd /etc/apache2"

"mkdir sites-available"

"cd sites-available"

"sudo touch default-ssl.conf"

"sudo chmod 777 default-ssl.conf"

"vi default-ssl.conf"

//Antes de continuar, vamos voltar para o arquivo de Host Virtual SSL original:

"sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bak"

"cd /etc/apache2/sites-available/"

"sudo chmod 777 default-ssl.conf.bak"

//colar isto nos dois arquivos:
//abra-os com 
"vi default-ssl.conf.bak"
"vi default-ssl.conf"
//cole:
/*
<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin webmaster@localhost

                DocumentRoot /var/www/html

                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined

                SSLEngine on

                SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem
                SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>
                <Directory /usr/lib/cgi-bin>
                                SSLOptions +StdEnvVars
                </Directory>

        </VirtualHost>
</IfModule>
*/

fazer as sequintes alterações no documento "default-ssl.conf",  nos textos que estao entre 3 tags.

/*
<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin <<<your_email@example.com>>>
	     <<<ServerName server_domain_or_IP>>>
                DocumentRoot /var/www/html

                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined

                SSLEngine on

                SSLCertificateFile      /etc/ssl/certs/<<<apache-selfsigned.crt>>>
                SSLCertificateKeyFile /etc/ssl/private/<<<apache-selfsigned.key>>>

                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>
                <Directory /usr/lib/cgi-bin>
                                SSLOptions +StdEnvVars
                </Directory>

        </VirtualHost>
</IfModule>
*/

//Recomendado: Modificando o arquivo de host HTTP para redirecionar para HTTPS

"cd /etc/apache2/sites-available/"

"sudo touch 000-default.conf"

"sudo chmod 777 000-default.conf"

"vi 000-default.conf"

//Lá, dentro dos blocos de configuração VirtualHost, precisamos adicionar uma diretiva Redirect, que direciona todo o tráfego para a versão SSL do site:

/*
<VirtualHost *:80>
        . . .

        Redirect "/" "https://your_domain_or_IP/"

        . . .
</VirtualHost>
*/

Passo 3 — Como ajustar o Firewall
//Podemos ver os perfis disponíveis digitando:
"sudo ufw app list"

//Você pode verificar a configuração atual do firewall digitando:
"sudo ufw status"

//dependendo do  status entre inactive e active, mostrarar apenas
status: inactive
ou
/*Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere
Apache                     ALLOW       Anywhere
OpenSSH (v6)               ALLOW       Anywhere (v6)
Apache (v6)                ALLOW       Anywhere (v6)
*/
//no caso meu firewall estava desabilitado, lancei  esse comando pra habilitar ele.
"sudo ufw enable"

//liberar todas instancias do apache
"sudo ufw allow 'Apache Full'"	//deu erro, não encontrado

//retirar o(s) que tenham apenas Apache no nome
"sudo ufw delete allow 'Apache'"	//deu erro, não encontrado

//No caso vou desabilitar o fire wall para ver se funciona

Passo 4 — Habilitando as alterações no Apache

